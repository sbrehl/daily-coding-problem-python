# -*- coding: utf-8 -*-
"""
Created on Mon May 30 06:46:55 2022

@author: Sascha

Daily Coding Problem #20 (Google)

Given two singly linked lists that intersect at some point, find the 
intersecting node. The lists are non-cyclical.

For example, given A = 3 -> 7 -> 8 -> 10 and B = 99 -> 1 -> 8 -> 10, return the
node with value 8.

In this example, assume nodes with the same value are the exact same node objects.

Do this in O(M + N) time (where M and N are the lengths of the lists) and 
constant space.
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self):
        self.head = None
        
    def is_empty(self):
        return self.head == None
        
    def insert_at_front(self, value):
        node = Node(value)
        
        if self.is_empty():
            self.head = node
        else:
            node.next = self.head
            self.head = node
        
    def insert_at_back(self, value):
        node = Node(value)
        
        if self.is_empty():
            self.head = node
        else:
            curr = self.head 
            
            while curr.next != None:
                curr = curr.next
            curr.next = node
    
    def store_as_hashes(self):
        hash_list = []
        if self.is_empty() == False:
            curr = self.head
            while curr != None:
                hash_list.append(hash(curr.data))
                curr = curr.next
                
        return hash_list
    
    def find_intersecting_node(self, hash_list):
        '''
        

        Parameters
        ----------
        hash_list : list
            a list of hashes of the first linked list; generated by 
                function "stores_as_hashes"

        Returns
        -------
        curr.data : data stored in the intersecting node

        '''
        if self.is_empty():
            print("List is empty.")
        else:
            curr = self.head
            
            while curr != None:
                if hash(curr.data) in hash_list:
                    return curr.data
                
                curr = curr.next
        
        print("No intersecting nodes!")
                
                
list1 = LinkedList()
list2 = LinkedList()
list1.insert_at_front(1)
list1.insert_at_back(5)
list1.insert_at_back(10)

list2.insert_at_front(9)
list2.insert_at_back(5)
list2.insert_at_back(10)

list2.find_intersecting_node(list1.store_as_hashes())